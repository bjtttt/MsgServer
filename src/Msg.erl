%% Generated by the Erlang ASN.1 BER_V2-compiler version, utilizing bit-syntax:2.0
%% Purpose: encoder and decoder to the types in mod Msg

-module('Msg').
-compile(nowarn_unused_vars).
-include("Msg.hrl").
-asn1_info([{vsn,'2.0'},
            {module,'Msg'},
            {options,[ber,{i,"."}]}]).

-export([encoding_rule/0,bit_string_format/0]).
-export([
'enc_T-generalReply'/2,
'enc_P-generalReply'/2,
'enc_T-heartbeat'/2,
'enc_P-dividePackageRequest'/2,
'enc_T-register'/2,
'enc_P-regReply'/2,
'enc_T-cancel'/2,
'enc_T-checkCode'/2,
'enc_P-SetArgs'/2,
'enc_P-queryArgs'/2,
'enc_P-querySpecifyArgs'/2,
'enc_T-queryArgsReply'/2,
'enc_P-control'/2,
'enc_P-queryArr'/2,
'enc_T-queryArrReply'/2,
'enc_P-updatePackage'/2,
'enc_T-updateResult'/2,
'enc_T-positionReport'/2,
'enc_P-queryPositoin'/2,
'enc_T-queryPosReply'/2,
'enc_P-tmpPosTrackControl'/2,
'enc_T-manConfirmAlarm'/2,
'enc_P-txtSend'/2,
'enc_P-eventSet'/2,
'enc_T-eventReport'/2,
'enc_T-questionSend'/2,
'enc_T-questionReply'/2,
'enc_P-msgMenuSet'/2,
'enc_T-msgProOrCancel'/2,
'enc_P-msgService'/2,
'enc_T-telAnswer'/2,
'enc_P-setTelNote'/2,
'enc_P-carControl'/2,
'enc_T-carConReply'/2,
'enc_P-setRotundityArea'/2,
'enc_P-delRotundityArea'/2,
'enc_P-setRectangleArea'/2,
'enc_P-delRectangleArea'/2,
'enc_P-setPolygonArea'/2,
'enc_P-delPolygonArea'/2,
'enc_P-setLine'/2,
'enc_P-delLine'/2,
'enc_P-recordCollectionOrder'/2,
'enc_T-recordUpdate'/2,
'enc_P-recordArgsSend'/2,
'enc_T-electronInvoiceReport'/2,
'enc_T-repIdeRequest'/2,
'enc_T-ideColReport'/2,
'enc_T-siteDataUpdate'/2,
'enc_T-CANDataUpdate'/2,
'enc_T-multimediaEventUpdate'/2,
'enc_T-multimediaDataUpdate'/2,
'enc_P-multimediaDataReply'/2,
'enc_P-shootOrder'/2,
'enc_T-shootOrderReply'/2,
'enc_P-stoMulDataSearch'/2,
'enc_T-stoMulDataReply'/2,
'enc_T-stoMulDataUpdate'/2,
'enc_P-recordStartOrder'/2,
'enc_T-singlestoMulDataSeaUpdOrder'/2,
'enc_P-dataSend'/2,
'enc_T-dataUpdate'/2,
'enc_T-compressUpdtae'/2,
'enc_P-RSA'/2,
'enc_T-RSA'/2
]).

-export([
'dec_T-generalReply'/2,
'dec_P-generalReply'/2,
'dec_T-heartbeat'/2,
'dec_P-dividePackageRequest'/2,
'dec_T-register'/2,
'dec_P-regReply'/2,
'dec_T-cancel'/2,
'dec_T-checkCode'/2,
'dec_P-SetArgs'/2,
'dec_P-queryArgs'/2,
'dec_P-querySpecifyArgs'/2,
'dec_T-queryArgsReply'/2,
'dec_P-control'/2,
'dec_P-queryArr'/2,
'dec_T-queryArrReply'/2,
'dec_P-updatePackage'/2,
'dec_T-updateResult'/2,
'dec_T-positionReport'/2,
'dec_P-queryPositoin'/2,
'dec_T-queryPosReply'/2,
'dec_P-tmpPosTrackControl'/2,
'dec_T-manConfirmAlarm'/2,
'dec_P-txtSend'/2,
'dec_P-eventSet'/2,
'dec_T-eventReport'/2,
'dec_T-questionSend'/2,
'dec_T-questionReply'/2,
'dec_P-msgMenuSet'/2,
'dec_T-msgProOrCancel'/2,
'dec_P-msgService'/2,
'dec_T-telAnswer'/2,
'dec_P-setTelNote'/2,
'dec_P-carControl'/2,
'dec_T-carConReply'/2,
'dec_P-setRotundityArea'/2,
'dec_P-delRotundityArea'/2,
'dec_P-setRectangleArea'/2,
'dec_P-delRectangleArea'/2,
'dec_P-setPolygonArea'/2,
'dec_P-delPolygonArea'/2,
'dec_P-setLine'/2,
'dec_P-delLine'/2,
'dec_P-recordCollectionOrder'/2,
'dec_T-recordUpdate'/2,
'dec_P-recordArgsSend'/2,
'dec_T-electronInvoiceReport'/2,
'dec_T-repIdeRequest'/2,
'dec_T-ideColReport'/2,
'dec_T-siteDataUpdate'/2,
'dec_T-CANDataUpdate'/2,
'dec_T-multimediaEventUpdate'/2,
'dec_T-multimediaDataUpdate'/2,
'dec_P-multimediaDataReply'/2,
'dec_P-shootOrder'/2,
'dec_T-shootOrderReply'/2,
'dec_P-stoMulDataSearch'/2,
'dec_T-stoMulDataReply'/2,
'dec_T-stoMulDataUpdate'/2,
'dec_P-recordStartOrder'/2,
'dec_T-singlestoMulDataSeaUpdOrder'/2,
'dec_P-dataSend'/2,
'dec_T-dataUpdate'/2,
'dec_T-compressUpdtae'/2,
'dec_P-RSA'/2,
'dec_T-RSA'/2
]).

-export([info/0]).


-export([encode/2,decode/2]).

encoding_rule() -> ber.

bit_string_format() -> bitstring.

encode(Type,Data) ->
case catch encode_disp(Type,Data) of
  {'EXIT',{error,Reason}} ->
    {error,Reason};
  {'EXIT',Reason} ->
    {error,{asn1,Reason}};
  {Bytes,_Len} ->
    {ok,iolist_to_binary(Bytes)};
  Bytes ->
    {ok,iolist_to_binary(Bytes)}
end.

decode(Type,Data) ->
case catch decode_disp(Type,element(1, ber_decode_nif(Data))) of
  {'EXIT',{error,Reason}} ->
    {error,Reason};
  {'EXIT',Reason} ->
    {error,{asn1,Reason}};
  Result ->
    {ok,Result}
end.

encode_disp('T-generalReply',Data) -> 'enc_T-generalReply'(Data);
encode_disp('P-generalReply',Data) -> 'enc_P-generalReply'(Data);
encode_disp('T-heartbeat',Data) -> 'enc_T-heartbeat'(Data);
encode_disp('P-dividePackageRequest',Data) -> 'enc_P-dividePackageRequest'(Data);
encode_disp('T-register',Data) -> 'enc_T-register'(Data);
encode_disp('P-regReply',Data) -> 'enc_P-regReply'(Data);
encode_disp('T-cancel',Data) -> 'enc_T-cancel'(Data);
encode_disp('T-checkCode',Data) -> 'enc_T-checkCode'(Data);
encode_disp('P-SetArgs',Data) -> 'enc_P-SetArgs'(Data);
encode_disp('P-queryArgs',Data) -> 'enc_P-queryArgs'(Data);
encode_disp('P-querySpecifyArgs',Data) -> 'enc_P-querySpecifyArgs'(Data);
encode_disp('T-queryArgsReply',Data) -> 'enc_T-queryArgsReply'(Data);
encode_disp('P-control',Data) -> 'enc_P-control'(Data);
encode_disp('P-queryArr',Data) -> 'enc_P-queryArr'(Data);
encode_disp('T-queryArrReply',Data) -> 'enc_T-queryArrReply'(Data);
encode_disp('P-updatePackage',Data) -> 'enc_P-updatePackage'(Data);
encode_disp('T-updateResult',Data) -> 'enc_T-updateResult'(Data);
encode_disp('T-positionReport',Data) -> 'enc_T-positionReport'(Data);
encode_disp('P-queryPositoin',Data) -> 'enc_P-queryPositoin'(Data);
encode_disp('T-queryPosReply',Data) -> 'enc_T-queryPosReply'(Data);
encode_disp('P-tmpPosTrackControl',Data) -> 'enc_P-tmpPosTrackControl'(Data);
encode_disp('T-manConfirmAlarm',Data) -> 'enc_T-manConfirmAlarm'(Data);
encode_disp('P-txtSend',Data) -> 'enc_P-txtSend'(Data);
encode_disp('P-eventSet',Data) -> 'enc_P-eventSet'(Data);
encode_disp('T-eventReport',Data) -> 'enc_T-eventReport'(Data);
encode_disp('T-questionSend',Data) -> 'enc_T-questionSend'(Data);
encode_disp('T-questionReply',Data) -> 'enc_T-questionReply'(Data);
encode_disp('P-msgMenuSet',Data) -> 'enc_P-msgMenuSet'(Data);
encode_disp('T-msgProOrCancel',Data) -> 'enc_T-msgProOrCancel'(Data);
encode_disp('P-msgService',Data) -> 'enc_P-msgService'(Data);
encode_disp('T-telAnswer',Data) -> 'enc_T-telAnswer'(Data);
encode_disp('P-setTelNote',Data) -> 'enc_P-setTelNote'(Data);
encode_disp('P-carControl',Data) -> 'enc_P-carControl'(Data);
encode_disp('T-carConReply',Data) -> 'enc_T-carConReply'(Data);
encode_disp('P-setRotundityArea',Data) -> 'enc_P-setRotundityArea'(Data);
encode_disp('P-delRotundityArea',Data) -> 'enc_P-delRotundityArea'(Data);
encode_disp('P-setRectangleArea',Data) -> 'enc_P-setRectangleArea'(Data);
encode_disp('P-delRectangleArea',Data) -> 'enc_P-delRectangleArea'(Data);
encode_disp('P-setPolygonArea',Data) -> 'enc_P-setPolygonArea'(Data);
encode_disp('P-delPolygonArea',Data) -> 'enc_P-delPolygonArea'(Data);
encode_disp('P-setLine',Data) -> 'enc_P-setLine'(Data);
encode_disp('P-delLine',Data) -> 'enc_P-delLine'(Data);
encode_disp('P-recordCollectionOrder',Data) -> 'enc_P-recordCollectionOrder'(Data);
encode_disp('T-recordUpdate',Data) -> 'enc_T-recordUpdate'(Data);
encode_disp('P-recordArgsSend',Data) -> 'enc_P-recordArgsSend'(Data);
encode_disp('T-electronInvoiceReport',Data) -> 'enc_T-electronInvoiceReport'(Data);
encode_disp('T-repIdeRequest',Data) -> 'enc_T-repIdeRequest'(Data);
encode_disp('T-ideColReport',Data) -> 'enc_T-ideColReport'(Data);
encode_disp('T-siteDataUpdate',Data) -> 'enc_T-siteDataUpdate'(Data);
encode_disp('T-CANDataUpdate',Data) -> 'enc_T-CANDataUpdate'(Data);
encode_disp('T-multimediaEventUpdate',Data) -> 'enc_T-multimediaEventUpdate'(Data);
encode_disp('T-multimediaDataUpdate',Data) -> 'enc_T-multimediaDataUpdate'(Data);
encode_disp('P-multimediaDataReply',Data) -> 'enc_P-multimediaDataReply'(Data);
encode_disp('P-shootOrder',Data) -> 'enc_P-shootOrder'(Data);
encode_disp('T-shootOrderReply',Data) -> 'enc_T-shootOrderReply'(Data);
encode_disp('P-stoMulDataSearch',Data) -> 'enc_P-stoMulDataSearch'(Data);
encode_disp('T-stoMulDataReply',Data) -> 'enc_T-stoMulDataReply'(Data);
encode_disp('T-stoMulDataUpdate',Data) -> 'enc_T-stoMulDataUpdate'(Data);
encode_disp('P-recordStartOrder',Data) -> 'enc_P-recordStartOrder'(Data);
encode_disp('T-singlestoMulDataSeaUpdOrder',Data) -> 'enc_T-singlestoMulDataSeaUpdOrder'(Data);
encode_disp('P-dataSend',Data) -> 'enc_P-dataSend'(Data);
encode_disp('T-dataUpdate',Data) -> 'enc_T-dataUpdate'(Data);
encode_disp('T-compressUpdtae',Data) -> 'enc_T-compressUpdtae'(Data);
encode_disp('P-RSA',Data) -> 'enc_P-RSA'(Data);
encode_disp('T-RSA',Data) -> 'enc_T-RSA'(Data);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('T-generalReply',Data) -> 'dec_T-generalReply'(Data);
decode_disp('P-generalReply',Data) -> 'dec_P-generalReply'(Data);
decode_disp('T-heartbeat',Data) -> 'dec_T-heartbeat'(Data);
decode_disp('P-dividePackageRequest',Data) -> 'dec_P-dividePackageRequest'(Data);
decode_disp('T-register',Data) -> 'dec_T-register'(Data);
decode_disp('P-regReply',Data) -> 'dec_P-regReply'(Data);
decode_disp('T-cancel',Data) -> 'dec_T-cancel'(Data);
decode_disp('T-checkCode',Data) -> 'dec_T-checkCode'(Data);
decode_disp('P-SetArgs',Data) -> 'dec_P-SetArgs'(Data);
decode_disp('P-queryArgs',Data) -> 'dec_P-queryArgs'(Data);
decode_disp('P-querySpecifyArgs',Data) -> 'dec_P-querySpecifyArgs'(Data);
decode_disp('T-queryArgsReply',Data) -> 'dec_T-queryArgsReply'(Data);
decode_disp('P-control',Data) -> 'dec_P-control'(Data);
decode_disp('P-queryArr',Data) -> 'dec_P-queryArr'(Data);
decode_disp('T-queryArrReply',Data) -> 'dec_T-queryArrReply'(Data);
decode_disp('P-updatePackage',Data) -> 'dec_P-updatePackage'(Data);
decode_disp('T-updateResult',Data) -> 'dec_T-updateResult'(Data);
decode_disp('T-positionReport',Data) -> 'dec_T-positionReport'(Data);
decode_disp('P-queryPositoin',Data) -> 'dec_P-queryPositoin'(Data);
decode_disp('T-queryPosReply',Data) -> 'dec_T-queryPosReply'(Data);
decode_disp('P-tmpPosTrackControl',Data) -> 'dec_P-tmpPosTrackControl'(Data);
decode_disp('T-manConfirmAlarm',Data) -> 'dec_T-manConfirmAlarm'(Data);
decode_disp('P-txtSend',Data) -> 'dec_P-txtSend'(Data);
decode_disp('P-eventSet',Data) -> 'dec_P-eventSet'(Data);
decode_disp('T-eventReport',Data) -> 'dec_T-eventReport'(Data);
decode_disp('T-questionSend',Data) -> 'dec_T-questionSend'(Data);
decode_disp('T-questionReply',Data) -> 'dec_T-questionReply'(Data);
decode_disp('P-msgMenuSet',Data) -> 'dec_P-msgMenuSet'(Data);
decode_disp('T-msgProOrCancel',Data) -> 'dec_T-msgProOrCancel'(Data);
decode_disp('P-msgService',Data) -> 'dec_P-msgService'(Data);
decode_disp('T-telAnswer',Data) -> 'dec_T-telAnswer'(Data);
decode_disp('P-setTelNote',Data) -> 'dec_P-setTelNote'(Data);
decode_disp('P-carControl',Data) -> 'dec_P-carControl'(Data);
decode_disp('T-carConReply',Data) -> 'dec_T-carConReply'(Data);
decode_disp('P-setRotundityArea',Data) -> 'dec_P-setRotundityArea'(Data);
decode_disp('P-delRotundityArea',Data) -> 'dec_P-delRotundityArea'(Data);
decode_disp('P-setRectangleArea',Data) -> 'dec_P-setRectangleArea'(Data);
decode_disp('P-delRectangleArea',Data) -> 'dec_P-delRectangleArea'(Data);
decode_disp('P-setPolygonArea',Data) -> 'dec_P-setPolygonArea'(Data);
decode_disp('P-delPolygonArea',Data) -> 'dec_P-delPolygonArea'(Data);
decode_disp('P-setLine',Data) -> 'dec_P-setLine'(Data);
decode_disp('P-delLine',Data) -> 'dec_P-delLine'(Data);
decode_disp('P-recordCollectionOrder',Data) -> 'dec_P-recordCollectionOrder'(Data);
decode_disp('T-recordUpdate',Data) -> 'dec_T-recordUpdate'(Data);
decode_disp('P-recordArgsSend',Data) -> 'dec_P-recordArgsSend'(Data);
decode_disp('T-electronInvoiceReport',Data) -> 'dec_T-electronInvoiceReport'(Data);
decode_disp('T-repIdeRequest',Data) -> 'dec_T-repIdeRequest'(Data);
decode_disp('T-ideColReport',Data) -> 'dec_T-ideColReport'(Data);
decode_disp('T-siteDataUpdate',Data) -> 'dec_T-siteDataUpdate'(Data);
decode_disp('T-CANDataUpdate',Data) -> 'dec_T-CANDataUpdate'(Data);
decode_disp('T-multimediaEventUpdate',Data) -> 'dec_T-multimediaEventUpdate'(Data);
decode_disp('T-multimediaDataUpdate',Data) -> 'dec_T-multimediaDataUpdate'(Data);
decode_disp('P-multimediaDataReply',Data) -> 'dec_P-multimediaDataReply'(Data);
decode_disp('P-shootOrder',Data) -> 'dec_P-shootOrder'(Data);
decode_disp('T-shootOrderReply',Data) -> 'dec_T-shootOrderReply'(Data);
decode_disp('P-stoMulDataSearch',Data) -> 'dec_P-stoMulDataSearch'(Data);
decode_disp('T-stoMulDataReply',Data) -> 'dec_T-stoMulDataReply'(Data);
decode_disp('T-stoMulDataUpdate',Data) -> 'dec_T-stoMulDataUpdate'(Data);
decode_disp('P-recordStartOrder',Data) -> 'dec_P-recordStartOrder'(Data);
decode_disp('T-singlestoMulDataSeaUpdOrder',Data) -> 'dec_T-singlestoMulDataSeaUpdOrder'(Data);
decode_disp('P-dataSend',Data) -> 'dec_P-dataSend'(Data);
decode_disp('T-dataUpdate',Data) -> 'dec_T-dataUpdate'(Data);
decode_disp('T-compressUpdtae',Data) -> 'dec_T-compressUpdtae'(Data);
decode_disp('P-RSA',Data) -> 'dec_P-RSA'(Data);
decode_disp('T-RSA',Data) -> 'dec_T-RSA'(Data);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).





info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.


%%================================
%%  T-generalReply
%%================================
'enc_T-generalReply'(Val) ->
    'enc_T-generalReply'(Val, [<<48>>]).

'enc_T-generalReply'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute replyNum(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute id(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute result(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [{affirm,0},{fail,1},{err,2},{noSupport,3}], [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_T-generalReply'(Tlv) ->
   'dec_T-generalReply'(Tlv, [16]).

'dec_T-generalReply'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute replyNum(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute id(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

%%-------------------------------------------------
%% attribute result(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_integer(V3,[],[{affirm,0},{fail,1},{err,2},{noSupport,3}],[2]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'T-generalReply', Term1, Term2, Term3}.



%%================================
%%  P-generalReply
%%================================
'enc_P-generalReply'(Val) ->
    'enc_P-generalReply'(Val, [<<48>>]).

'enc_P-generalReply'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute replyNum(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute id(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute result(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [{affirm,0},{fail,1},{err,2},{noSupport,3},{alarmAffirm,4}], [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_P-generalReply'(Tlv) ->
   'dec_P-generalReply'(Tlv, [16]).

'dec_P-generalReply'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute replyNum(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute id(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

%%-------------------------------------------------
%% attribute result(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_integer(V3,[],[{affirm,0},{fail,1},{err,2},{noSupport,3},{alarmAffirm,4}],[2]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'P-generalReply', Term1, Term2, Term3}.



%%================================
%%  T-heartbeat
%%================================
'enc_T-heartbeat'(Val) ->
    'enc_T-heartbeat'(Val, [<<48>>]).

'enc_T-heartbeat'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute none(1) with type NULL
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_null(Cindex1, [<<5>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_T-heartbeat'(Tlv) ->
   'dec_T-heartbeat'(Tlv, [16]).

'dec_T-heartbeat'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute none(1) with type NULL
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_null(V1,[5]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'T-heartbeat', Term1}.



%%================================
%%  P-dividePackageRequest
%%================================
'enc_P-dividePackageRequest'(Val) ->
    'enc_P-dividePackageRequest'(Val, [<<48>>]).

'enc_P-dividePackageRequest'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute originalityMsgNum(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute packageCount(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute packageId(3) with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_bit_string([], Cindex3, [], [<<3>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_P-dividePackageRequest'(Tlv) ->
   'dec_P-dividePackageRequest'(Tlv, [16]).

'dec_P-dividePackageRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute originalityMsgNum(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute packageCount(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

%%-------------------------------------------------
%% attribute packageId(3) with type BIT STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_native_bit_string(V3, [], [3]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'P-dividePackageRequest', Term1, Term2, Term3}.



%%================================
%%  T-register
%%================================
'enc_T-register'(Val) ->
    'enc_T-register'(Val, [<<48>>]).

'enc_T-register'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7} = Val,

%%-------------------------------------------------
%% attribute provinceId(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute cityId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute proId(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<2>>]),

%%-------------------------------------------------
%% attribute terminalType(4) with type IA5String
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_restricted_string(Cindex4, [<<22>>]),

%%-------------------------------------------------
%% attribute terminalId(5) with type INTEGER
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_integer(Cindex5, [<<2>>]),

%%-------------------------------------------------
%% attribute plateColor(6) with type INTEGER
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_integer(Cindex6, [<<2>>]),

%%-------------------------------------------------
%% attribute carMark(7) with type IA5String
%%-------------------------------------------------
   {EncBytes7,EncLen7} = encode_restricted_string(Cindex7, [<<22>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_T-register'(Tlv) ->
   'dec_T-register'(Tlv, [16]).

'dec_T-register'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute provinceId(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute cityId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

%%-------------------------------------------------
%% attribute proId(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_integer(V3,[],[2]),

%%-------------------------------------------------
%% attribute terminalType(4) with type IA5String
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_restricted_string(V4,[22]),

%%-------------------------------------------------
%% attribute terminalId(5) with type INTEGER
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_integer(V5,[],[2]),

%%-------------------------------------------------
%% attribute plateColor(6) with type INTEGER
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = decode_integer(V6,[],[2]),

%%-------------------------------------------------
%% attribute carMark(7) with type IA5String
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = decode_restricted_string(V7,[22]),

case Tlv8 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv8}}}) % extra fields not allowed
end,
   {'T-register', Term1, Term2, Term3, Term4, Term5, Term6, Term7}.



%%================================
%%  P-regReply
%%================================
'enc_P-regReply'(Val) ->
    'enc_P-regReply'(Val, [<<48>>]).

'enc_P-regReply'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute replyNum(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute result(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [{success,0},{carRegistered,1},{noCar,2},{terRegistered,3},{dataBaseNoTer,4}], [<<2>>]),

%%-------------------------------------------------
%% attribute authentication(3) with type IA5String
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_restricted_string(Cindex3, [<<22>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_P-regReply'(Tlv) ->
   'dec_P-regReply'(Tlv, [16]).

'dec_P-regReply'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute replyNum(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute result(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[{success,0},{carRegistered,1},{noCar,2},{terRegistered,3},{dataBaseNoTer,4}],[2]),

%%-------------------------------------------------
%% attribute authentication(3) with type IA5String
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_restricted_string(V3,[22]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'P-regReply', Term1, Term2, Term3}.



%%================================
%%  T-cancel
%%================================
'enc_T-cancel'(Val) ->
    'enc_T-cancel'(Val, [<<48>>]).

'enc_T-cancel'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute none(1) with type NULL
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_null(Cindex1, [<<5>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_T-cancel'(Tlv) ->
   'dec_T-cancel'(Tlv, [16]).

'dec_T-cancel'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute none(1) with type NULL
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_null(V1,[5]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'T-cancel', Term1}.



%%================================
%%  T-checkCode
%%================================
'enc_T-checkCode'(Val) ->
    'enc_T-checkCode'(Val, [<<48>>]).

'enc_T-checkCode'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute authentication(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<22>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_T-checkCode'(Tlv) ->
   'dec_T-checkCode'(Tlv, [16]).

'dec_T-checkCode'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute authentication(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_restricted_string(V1,[22]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'T-checkCode', Term1}.



%%================================
%%  P-SetArgs
%%================================
'enc_P-SetArgs'(Val) ->
    'enc_P-SetArgs'(Val, [<<48>>]).

'enc_P-SetArgs'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute argsCount(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute argsList(2) with type SEQUENCE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_P-SetArgs_argsList'(Cindex2, [<<48>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  P-SetArgs_argsList
%%================================
'enc_P-SetArgs_argsList'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute len(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute value(3) with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_bit_string([], Cindex3, [], [<<3>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_P-SetArgs_argsList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute len(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

%%-------------------------------------------------
%% attribute value(3) with type BIT STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_native_bit_string(V3, [], [3]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'P-SetArgs_argsList', Term1, Term2, Term3}.



'dec_P-SetArgs'(Tlv) ->
   'dec_P-SetArgs'(Tlv, [16]).

'dec_P-SetArgs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute argsCount(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute argsList(2) with type SEQUENCE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_P-SetArgs_argsList'(V2, [16]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'P-SetArgs', Term1, Term2}.



%%================================
%%  P-queryArgs
%%================================
'enc_P-queryArgs'(Val) ->
    'enc_P-queryArgs'(Val, [<<48>>]).

'enc_P-queryArgs'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute none(1) with type NULL
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_null(Cindex1, [<<5>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_P-queryArgs'(Tlv) ->
   'dec_P-queryArgs'(Tlv, [16]).

'dec_P-queryArgs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute none(1) with type NULL
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_null(V1,[5]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'P-queryArgs', Term1}.



%%================================
%%  P-querySpecifyArgs
%%================================
'enc_P-querySpecifyArgs'(Val) ->
    'enc_P-querySpecifyArgs'(Val, [<<48>>]).

'enc_P-querySpecifyArgs'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute argsCount(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute argsIdLists(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_bit_string([], Cindex2, [], [<<3>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_P-querySpecifyArgs'(Tlv) ->
   'dec_P-querySpecifyArgs'(Tlv, [16]).

'dec_P-querySpecifyArgs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute argsCount(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute argsIdLists(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_native_bit_string(V2, [], [3]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'P-querySpecifyArgs', Term1, Term2}.



%%================================
%%  T-queryArgsReply
%%================================
'enc_T-queryArgsReply'(Val) ->
    'enc_T-queryArgsReply'(Val, [<<48>>]).

'enc_T-queryArgsReply'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute replyNum(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute replyCount(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute argsLists(3) with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_bit_string([], Cindex3, [], [<<3>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_T-queryArgsReply'(Tlv) ->
   'dec_T-queryArgsReply'(Tlv, [16]).

'dec_T-queryArgsReply'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute replyNum(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute replyCount(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

%%-------------------------------------------------
%% attribute argsLists(3) with type BIT STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_native_bit_string(V3, [], [3]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'T-queryArgsReply', Term1, Term2, Term3}.



%%================================
%%  P-control
%%================================
'enc_P-control'(Val) ->
    'enc_P-control'(Val, [<<48>>]).

'enc_P-control'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute orderWord(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute orderARgs(2) with type IA5String
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<22>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_P-control'(Tlv) ->
   'dec_P-control'(Tlv, [16]).

'dec_P-control'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute orderWord(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,{1,7},[2]),

%%-------------------------------------------------
%% attribute orderARgs(2) with type IA5String
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_restricted_string(V2,[22]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'P-control', Term1, Term2}.



%%================================
%%  P-queryArr
%%================================
'enc_P-queryArr'(Val) ->
    'enc_P-queryArr'(Val, [<<48>>]).

'enc_P-queryArr'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute none(1) with type NULL
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_null(Cindex1, [<<5>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_P-queryArr'(Tlv) ->
   'dec_P-queryArr'(Tlv, [16]).

'dec_P-queryArr'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute none(1) with type NULL
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_null(V1,[5]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'P-queryArr', Term1}.



%%================================
%%  T-queryArrReply
%%================================
'enc_T-queryArrReply'(Val) ->
    'enc_T-queryArrReply'(Val, [<<48>>]).

'enc_T-queryArrReply'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9} = Val,

%%-------------------------------------------------
%% attribute terType(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute proId(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_bit_string([{'SizeConstraint',5}], Cindex2, [], [<<3>>]),

%%-------------------------------------------------
%% attribute terModel(3) with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_bit_string([{'SizeConstraint',20}], Cindex3, [], [<<3>>]),

%%-------------------------------------------------
%% attribute terId(4) with type BIT STRING
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_bit_string([{'SizeConstraint',7}], Cindex4, [], [<<3>>]),

%%-------------------------------------------------
%% attribute iCCID(5) with type BIT STRING
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_bit_string([], Cindex5, [], [<<3>>]),

%%-------------------------------------------------
%% attribute hardwareVersion(6) with type IA5String
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_restricted_string(Cindex6, [<<22>>]),

%%-------------------------------------------------
%% attribute firmware(7) with type IA5String
%%-------------------------------------------------
   {EncBytes7,EncLen7} = encode_restricted_string(Cindex7, [<<22>>]),

%%-------------------------------------------------
%% attribute gNSSArr(8) with type BIT STRING
%%-------------------------------------------------
   {EncBytes8,EncLen8} = encode_bit_string([{'SizeConstraint',4}], Cindex8, [], [<<3>>]),

%%-------------------------------------------------
%% attribute communicateArr(9) with type INTEGER
%%-------------------------------------------------
   {EncBytes9,EncLen9} = encode_integer(Cindex9, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_T-queryArrReply'(Tlv) ->
   'dec_T-queryArrReply'(Tlv, [16]).

'dec_T-queryArrReply'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute terType(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute proId(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_native_bit_string(V2, 5, [3]),

%%-------------------------------------------------
%% attribute terModel(3) with type BIT STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_native_bit_string(V3, 20, [3]),

%%-------------------------------------------------
%% attribute terId(4) with type BIT STRING
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_native_bit_string(V4, 7, [3]),

%%-------------------------------------------------
%% attribute iCCID(5) with type BIT STRING
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_native_bit_string(V5, [], [3]),

%%-------------------------------------------------
%% attribute hardwareVersion(6) with type IA5String
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = decode_restricted_string(V6,[22]),

%%-------------------------------------------------
%% attribute firmware(7) with type IA5String
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = decode_restricted_string(V7,[22]),

%%-------------------------------------------------
%% attribute gNSSArr(8) with type BIT STRING
%%-------------------------------------------------
[V8|Tlv9] = Tlv8, 
Term8 = decode_native_bit_string(V8, 4, [3]),

%%-------------------------------------------------
%% attribute communicateArr(9) with type INTEGER
%%-------------------------------------------------
[V9|Tlv10] = Tlv9, 
Term9 = decode_integer(V9,[],[2]),

case Tlv10 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv10}}}) % extra fields not allowed
end,
   {'T-queryArrReply', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9}.



%%================================
%%  P-updatePackage
%%================================
'enc_P-updatePackage'(Val) ->
    'enc_P-updatePackage'(Val, [<<48>>]).

'enc_P-updatePackage'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute updateType(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute proId(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_bit_string([{'SizeConstraint',5}], Cindex2, [], [<<3>>]),

%%-------------------------------------------------
%% attribute versionLen(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<2>>]),

%%-------------------------------------------------
%% attribute version(4) with type IA5String
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_restricted_string(Cindex4, [<<22>>]),

%%-------------------------------------------------
%% attribute updatePacLen(5) with type INTEGER
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_integer(Cindex5, [<<2>>]),

%%-------------------------------------------------
%% attribute updatePacket(6) with type BIT STRING
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_bit_string([], Cindex6, [], [<<3>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_P-updatePackage'(Tlv) ->
   'dec_P-updatePackage'(Tlv, [16]).

'dec_P-updatePackage'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute updateType(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute proId(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_native_bit_string(V2, 5, [3]),

%%-------------------------------------------------
%% attribute versionLen(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_integer(V3,[],[2]),

%%-------------------------------------------------
%% attribute version(4) with type IA5String
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_restricted_string(V4,[22]),

%%-------------------------------------------------
%% attribute updatePacLen(5) with type INTEGER
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_integer(V5,[],[2]),

%%-------------------------------------------------
%% attribute updatePacket(6) with type BIT STRING
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = decode_native_bit_string(V6, [], [3]),

case Tlv7 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv7}}}) % extra fields not allowed
end,
   {'P-updatePackage', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  T-updateResult
%%================================
'enc_T-updateResult'(Val) ->
    'enc_T-updateResult'(Val, [<<48>>]).

'enc_T-updateResult'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute updateType(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute updateResult(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_T-updateResult'(Tlv) ->
   'dec_T-updateResult'(Tlv, [16]).

'dec_T-updateResult'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute updateType(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute updateResult(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'T-updateResult', Term1, Term2}.



%%================================
%%  T-positionReport
%%================================
'enc_T-positionReport'(Val) ->
    'enc_T-positionReport'(Val, [<<48>>]).

'enc_T-positionReport'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute positionBaseMsg(1) with type SEQUENCE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_T-positionReport_positionBaseMsg'(Cindex1, [<<48>>]),

%%-------------------------------------------------
%% attribute positionAppMsg(2) with type SEQUENCE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_T-positionReport_positionAppMsg'(Cindex2, [<<48>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  T-positionReport_positionBaseMsg
%%================================
'enc_T-positionReport_positionBaseMsg'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8} = Val,

%%-------------------------------------------------
%% attribute alarmSymbol(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute state(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute latitude(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<2>>]),

%%-------------------------------------------------
%% attribute longitude(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<2>>]),

%%-------------------------------------------------
%% attribute hight(5) with type INTEGER
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_integer(Cindex5, [<<2>>]),

%%-------------------------------------------------
%% attribute speed(6) with type INTEGER
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_integer(Cindex6, [<<2>>]),

%%-------------------------------------------------
%% attribute direction(7) with type INTEGER
%%-------------------------------------------------
   {EncBytes7,EncLen7} = encode_integer(Cindex7, [<<2>>]),

%%-------------------------------------------------
%% attribute time(8) with type BIT STRING
%%-------------------------------------------------
   {EncBytes8,EncLen8} = encode_bit_string([{'SizeConstraint',48}], Cindex8, [], [<<3>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_T-positionReport_positionBaseMsg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute alarmSymbol(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute state(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

%%-------------------------------------------------
%% attribute latitude(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_integer(V3,[],[2]),

%%-------------------------------------------------
%% attribute longitude(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_integer(V4,[],[2]),

%%-------------------------------------------------
%% attribute hight(5) with type INTEGER
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_integer(V5,[],[2]),

%%-------------------------------------------------
%% attribute speed(6) with type INTEGER
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = decode_integer(V6,[],[2]),

%%-------------------------------------------------
%% attribute direction(7) with type INTEGER
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = decode_integer(V7,[],[2]),

%%-------------------------------------------------
%% attribute time(8) with type BIT STRING
%%-------------------------------------------------
[V8|Tlv9] = Tlv8, 
Term8 = decode_native_bit_string(V8, 48, [3]),

case Tlv9 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv9}}}) % extra fields not allowed
end,
   {'T-positionReport_positionBaseMsg', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8}.




%%================================
%%  T-positionReport_positionAppMsg
%%================================
'enc_T-positionReport_positionAppMsg'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute len(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute appendMsg(3) with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_bit_string([], Cindex3, [], [<<3>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_T-positionReport_positionAppMsg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute len(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

%%-------------------------------------------------
%% attribute appendMsg(3) with type BIT STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_native_bit_string(V3, [], [3]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'T-positionReport_positionAppMsg', Term1, Term2, Term3}.



'dec_T-positionReport'(Tlv) ->
   'dec_T-positionReport'(Tlv, [16]).

'dec_T-positionReport'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute positionBaseMsg(1) with type SEQUENCE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_T-positionReport_positionBaseMsg'(V1, [16]),

%%-------------------------------------------------
%% attribute positionAppMsg(2) with type SEQUENCE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_T-positionReport_positionAppMsg'(V2, [16]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'T-positionReport', Term1, Term2}.



%%================================
%%  P-queryPositoin
%%================================
'enc_P-queryPositoin'(Val) ->
    'enc_P-queryPositoin'(Val, [<<48>>]).

'enc_P-queryPositoin'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute none(1) with type NULL
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_null(Cindex1, [<<5>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_P-queryPositoin'(Tlv) ->
   'dec_P-queryPositoin'(Tlv, [16]).

'dec_P-queryPositoin'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute none(1) with type NULL
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_null(V1,[5]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'P-queryPositoin', Term1}.



%%================================
%%  T-queryPosReply
%%================================
'enc_T-queryPosReply'(Val) ->
    'enc_T-queryPosReply'(Val, [<<48>>]).

'enc_T-queryPosReply'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute replyNum(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute positionMsgReply(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_bit_string([], Cindex2, [], [<<3>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_T-queryPosReply'(Tlv) ->
   'dec_T-queryPosReply'(Tlv, [16]).

'dec_T-queryPosReply'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute replyNum(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute positionMsgReply(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_native_bit_string(V2, [], [3]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'T-queryPosReply', Term1, Term2}.



%%================================
%%  P-tmpPosTrackControl
%%================================
'enc_P-tmpPosTrackControl'(Val) ->
    'enc_P-tmpPosTrackControl'(Val, [<<48>>]).

'enc_P-tmpPosTrackControl'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute interval(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute posTracksValidity(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_P-tmpPosTrackControl'(Tlv) ->
   'dec_P-tmpPosTrackControl'(Tlv, [16]).

'dec_P-tmpPosTrackControl'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute interval(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute posTracksValidity(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'P-tmpPosTrackControl', Term1, Term2}.



%%================================
%%  T-manConfirmAlarm
%%================================
'enc_T-manConfirmAlarm'(Val) ->
    'enc_T-manConfirmAlarm'(Val, [<<48>>]).

'enc_T-manConfirmAlarm'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute number(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute type(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_T-manConfirmAlarm'(Tlv) ->
   'dec_T-manConfirmAlarm'(Tlv, [16]).

'dec_T-manConfirmAlarm'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute number(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute type(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'T-manConfirmAlarm', Term1, Term2}.



%%================================
%%  P-txtSend
%%================================
'enc_P-txtSend'(Val) ->
    'enc_P-txtSend'(Val, [<<48>>]).

'enc_P-txtSend'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute symbol(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute textMsg(2) with type IA5String
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<22>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_P-txtSend'(Tlv) ->
   'dec_P-txtSend'(Tlv, [16]).

'dec_P-txtSend'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute symbol(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute textMsg(2) with type IA5String
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_restricted_string(V2,[22]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'P-txtSend', Term1, Term2}.



%%================================
%%  P-eventSet
%%================================
'enc_P-eventSet'(Val) ->
    'enc_P-eventSet'(Val, [<<48>>]).

'enc_P-eventSet'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute setType(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute setCount(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute eventsList(3) with type SEQUENCE
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_P-eventSet_eventsList'(Cindex3, [<<48>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  P-eventSet_eventsList
%%================================
'enc_P-eventSet_eventsList'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute contentLen(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute content(3) with type IA5String
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_restricted_string(Cindex3, [<<22>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_P-eventSet_eventsList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute contentLen(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

%%-------------------------------------------------
%% attribute content(3) with type IA5String
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_restricted_string(V3,[22]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'P-eventSet_eventsList', Term1, Term2, Term3}.



'dec_P-eventSet'(Tlv) ->
   'dec_P-eventSet'(Tlv, [16]).

'dec_P-eventSet'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute setType(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute setCount(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

%%-------------------------------------------------
%% attribute eventsList(3) with type SEQUENCE
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_P-eventSet_eventsList'(V3, [16]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'P-eventSet', Term1, Term2, Term3}.



%%================================
%%  T-eventReport
%%================================
'enc_T-eventReport'(Val) ->
    'enc_T-eventReport'(Val, [<<48>>]).

'enc_T-eventReport'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_T-eventReport'(Tlv) ->
   'dec_T-eventReport'(Tlv, [16]).

'dec_T-eventReport'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'T-eventReport', Term1}.



%%================================
%%  T-questionSend
%%================================
'enc_T-questionSend'(Val) ->
    'enc_T-questionSend'(Val, [<<48>>]).

'enc_T-questionSend'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute symbol(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute queConLen(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute question(3) with type IA5String
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_restricted_string(Cindex3, [<<22>>]),

%%-------------------------------------------------
%% attribute ansLists(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_T-questionSend'(Tlv) ->
   'dec_T-questionSend'(Tlv, [16]).

'dec_T-questionSend'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute symbol(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute queConLen(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

%%-------------------------------------------------
%% attribute question(3) with type IA5String
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_restricted_string(V3,[22]),

%%-------------------------------------------------
%% attribute ansLists(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_integer(V4,[],[2]),

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'T-questionSend', Term1, Term2, Term3, Term4}.



%%================================
%%  T-questionReply
%%================================
'enc_T-questionReply'(Val) ->
    'enc_T-questionReply'(Val, [<<48>>]).

'enc_T-questionReply'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute number(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute answerId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_T-questionReply'(Tlv) ->
   'dec_T-questionReply'(Tlv, [16]).

'dec_T-questionReply'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute number(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute answerId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'T-questionReply', Term1, Term2}.



%%================================
%%  P-msgMenuSet
%%================================
'enc_P-msgMenuSet'(Val) ->
    'enc_P-msgMenuSet'(Val, [<<48>>]).

'enc_P-msgMenuSet'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute setType(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute msgItemCount(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute msgItemList(3) with type SEQUENCE
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_P-msgMenuSet_msgItemList'(Cindex3, [<<48>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  P-msgMenuSet_msgItemList
%%================================
'enc_P-msgMenuSet_msgItemList'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute msgType(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute msgNameLen(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute msgName(3) with type IA5String
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_restricted_string(Cindex3, [<<22>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_P-msgMenuSet_msgItemList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute msgType(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute msgNameLen(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

%%-------------------------------------------------
%% attribute msgName(3) with type IA5String
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_restricted_string(V3,[22]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'P-msgMenuSet_msgItemList', Term1, Term2, Term3}.



'dec_P-msgMenuSet'(Tlv) ->
   'dec_P-msgMenuSet'(Tlv, [16]).

'dec_P-msgMenuSet'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute setType(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute msgItemCount(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

%%-------------------------------------------------
%% attribute msgItemList(3) with type SEQUENCE
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_P-msgMenuSet_msgItemList'(V3, [16]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'P-msgMenuSet', Term1, Term2, Term3}.



%%================================
%%  T-msgProOrCancel
%%================================
'enc_T-msgProOrCancel'(Val) ->
    'enc_T-msgProOrCancel'(Val, [<<48>>]).

'enc_T-msgProOrCancel'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute msgType(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute playOrCancelSymbol(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_T-msgProOrCancel'(Tlv) ->
   'dec_T-msgProOrCancel'(Tlv, [16]).

'dec_T-msgProOrCancel'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute msgType(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute playOrCancelSymbol(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,{0,1},[2]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'T-msgProOrCancel', Term1, Term2}.



%%================================
%%  P-msgService
%%================================
'enc_P-msgService'(Val) ->
    'enc_P-msgService'(Val, [<<48>>]).

'enc_P-msgService'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute type(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute len(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute content(3) with type IA5String
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_restricted_string(Cindex3, [<<22>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_P-msgService'(Tlv) ->
   'dec_P-msgService'(Tlv, [16]).

'dec_P-msgService'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute type(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute len(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

%%-------------------------------------------------
%% attribute content(3) with type IA5String
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_restricted_string(V3,[22]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'P-msgService', Term1, Term2, Term3}.



%%================================
%%  T-telAnswer
%%================================
'enc_T-telAnswer'(Val) ->
    'enc_T-telAnswer'(Val, [<<48>>]).

'enc_T-telAnswer'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute symbol(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute number(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_bit_string([], Cindex2, [], [<<3>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_T-telAnswer'(Tlv) ->
   'dec_T-telAnswer'(Tlv, [16]).

'dec_T-telAnswer'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute symbol(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute number(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_native_bit_string(V2, [], [3]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'T-telAnswer', Term1, Term2}.



%%================================
%%  P-setTelNote
%%================================
'enc_P-setTelNote'(Val) ->
    'enc_P-setTelNote'(Val, [<<48>>]).

'enc_P-setTelNote'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute settype(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute conCount(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute conItem(3) with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_bit_string([], Cindex3, [], [<<3>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_P-setTelNote'(Tlv) ->
   'dec_P-setTelNote'(Tlv, [16]).

'dec_P-setTelNote'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute settype(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute conCount(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

%%-------------------------------------------------
%% attribute conItem(3) with type BIT STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_native_bit_string(V3, [], [3]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'P-setTelNote', Term1, Term2, Term3}.



%%================================
%%  P-carControl
%%================================
'enc_P-carControl'(Val) ->
    'enc_P-carControl'(Val, [<<48>>]).

'enc_P-carControl'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute symbol(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_P-carControl'(Tlv) ->
   'dec_P-carControl'(Tlv, [16]).

'dec_P-carControl'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute symbol(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'P-carControl', Term1}.



%%================================
%%  T-carConReply
%%================================
'enc_T-carConReply'(Val) ->
    'enc_T-carConReply'(Val, [<<48>>]).

'enc_T-carConReply'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute number(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute msgBody(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_bit_string([], Cindex2, [], [<<3>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_T-carConReply'(Tlv) ->
   'dec_T-carConReply'(Tlv, [16]).

'dec_T-carConReply'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute number(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute msgBody(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_native_bit_string(V2, [], [3]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'T-carConReply', Term1, Term2}.



%%================================
%%  P-setRotundityArea
%%================================
'enc_P-setRotundityArea'(Val) ->
    'enc_P-setRotundityArea'(Val, [<<48>>]).

'enc_P-setRotundityArea'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute setArr(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute areaCount(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute areaItems(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_P-setRotundityArea'(Tlv) ->
   'dec_P-setRotundityArea'(Tlv, [16]).

'dec_P-setRotundityArea'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute setArr(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute areaCount(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

%%-------------------------------------------------
%% attribute areaItems(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_integer(V3,[],[2]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'P-setRotundityArea', Term1, Term2, Term3}.



%%================================
%%  P-delRotundityArea
%%================================
'enc_P-delRotundityArea'(Val) ->
    'enc_P-delRotundityArea'(Val, [<<48>>]).

'enc_P-delRotundityArea'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute areaCount(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute areaId(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_bit_string([], Cindex2, [], [<<3>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_P-delRotundityArea'(Tlv) ->
   'dec_P-delRotundityArea'(Tlv, [16]).

'dec_P-delRotundityArea'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute areaCount(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute areaId(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_native_bit_string(V2, [], [3]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'P-delRotundityArea', Term1, Term2}.



%%================================
%%  P-setRectangleArea
%%================================
'enc_P-setRectangleArea'(Val) ->
    'enc_P-setRectangleArea'(Val, [<<48>>]).

'enc_P-setRectangleArea'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute setArr(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute areaCount(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute areaItem(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_P-setRectangleArea'(Tlv) ->
   'dec_P-setRectangleArea'(Tlv, [16]).

'dec_P-setRectangleArea'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute setArr(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute areaCount(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

%%-------------------------------------------------
%% attribute areaItem(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_integer(V3,[],[2]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'P-setRectangleArea', Term1, Term2, Term3}.



%%================================
%%  P-delRectangleArea
%%================================
'enc_P-delRectangleArea'(Val) ->
    'enc_P-delRectangleArea'(Val, [<<48>>]).

'enc_P-delRectangleArea'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute areaCount(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute areaId(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_bit_string([], Cindex2, [], [<<3>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_P-delRectangleArea'(Tlv) ->
   'dec_P-delRectangleArea'(Tlv, [16]).

'dec_P-delRectangleArea'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute areaCount(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute areaId(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_native_bit_string(V2, [], [3]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'P-delRectangleArea', Term1, Term2}.



%%================================
%%  P-setPolygonArea
%%================================
'enc_P-setPolygonArea'(Val) ->
    'enc_P-setPolygonArea'(Val, [<<48>>]).

'enc_P-setPolygonArea'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8} = Val,

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute attribute(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute startTime(3) with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_bit_string([], Cindex3, [], [<<3>>]),

%%-------------------------------------------------
%% attribute endTime(4) with type BIT STRING
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_bit_string([], Cindex4, [], [<<3>>]),

%%-------------------------------------------------
%% attribute highSpeed(5) with type INTEGER
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_integer(Cindex5, [<<2>>]),

%%-------------------------------------------------
%% attribute overspeedTime(6) with type INTEGER
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_integer(Cindex6, [<<2>>]),

%%-------------------------------------------------
%% attribute overallCount(7) with type INTEGER
%%-------------------------------------------------
   {EncBytes7,EncLen7} = encode_integer(Cindex7, [<<2>>]),

%%-------------------------------------------------
%% attribute overallItem(8) with type BIT STRING
%%-------------------------------------------------
   {EncBytes8,EncLen8} = encode_bit_string([], Cindex8, [], [<<3>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_P-setPolygonArea'(Tlv) ->
   'dec_P-setPolygonArea'(Tlv, [16]).

'dec_P-setPolygonArea'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute attribute(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

%%-------------------------------------------------
%% attribute startTime(3) with type BIT STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_native_bit_string(V3, [], [3]),

%%-------------------------------------------------
%% attribute endTime(4) with type BIT STRING
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_native_bit_string(V4, [], [3]),

%%-------------------------------------------------
%% attribute highSpeed(5) with type INTEGER
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_integer(V5,[],[2]),

%%-------------------------------------------------
%% attribute overspeedTime(6) with type INTEGER
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = decode_integer(V6,[],[2]),

%%-------------------------------------------------
%% attribute overallCount(7) with type INTEGER
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = decode_integer(V7,[],[2]),

%%-------------------------------------------------
%% attribute overallItem(8) with type BIT STRING
%%-------------------------------------------------
[V8|Tlv9] = Tlv8, 
Term8 = decode_native_bit_string(V8, [], [3]),

case Tlv9 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv9}}}) % extra fields not allowed
end,
   {'P-setPolygonArea', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8}.



%%================================
%%  P-delPolygonArea
%%================================
'enc_P-delPolygonArea'(Val) ->
    'enc_P-delPolygonArea'(Val, [<<48>>]).

'enc_P-delPolygonArea'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute areaCount(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute areaId(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_bit_string([], Cindex2, [], [<<3>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_P-delPolygonArea'(Tlv) ->
   'dec_P-delPolygonArea'(Tlv, [16]).

'dec_P-delPolygonArea'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute areaCount(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute areaId(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_native_bit_string(V2, [], [3]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'P-delPolygonArea', Term1, Term2}.



%%================================
%%  P-setLine
%%================================
'enc_P-setLine'(Val) ->
    'enc_P-setLine'(Val, [<<48>>]).

'enc_P-setLine'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute attribute(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute startTime(3) with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_bit_string([], Cindex3, [], [<<3>>]),

%%-------------------------------------------------
%% attribute endTime(4) with type BIT STRING
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_bit_string([], Cindex4, [], [<<3>>]),

%%-------------------------------------------------
%% attribute yieldingPointCount(5) with type INTEGER
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_integer(Cindex5, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_P-setLine'(Tlv) ->
   'dec_P-setLine'(Tlv, [16]).

'dec_P-setLine'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute attribute(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

%%-------------------------------------------------
%% attribute startTime(3) with type BIT STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_native_bit_string(V3, [], [3]),

%%-------------------------------------------------
%% attribute endTime(4) with type BIT STRING
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_native_bit_string(V4, [], [3]),

%%-------------------------------------------------
%% attribute yieldingPointCount(5) with type INTEGER
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_integer(V5,[],[2]),

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
   {'P-setLine', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  P-delLine
%%================================
'enc_P-delLine'(Val) ->
    'enc_P-delLine'(Val, [<<48>>]).

'enc_P-delLine'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute pathLineCount(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute pathId(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_bit_string([], Cindex2, [], [<<3>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_P-delLine'(Tlv) ->
   'dec_P-delLine'(Tlv, [16]).

'dec_P-delLine'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute pathLineCount(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute pathId(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_native_bit_string(V2, [], [3]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'P-delLine', Term1, Term2}.



%%================================
%%  P-recordCollectionOrder
%%================================
'enc_P-recordCollectionOrder'(Val) ->
    'enc_P-recordCollectionOrder'(Val, [<<48>>]).

'enc_P-recordCollectionOrder'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute orderWord(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute dataBlock(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_bit_string([], Cindex2, [], [<<3>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_P-recordCollectionOrder'(Tlv) ->
   'dec_P-recordCollectionOrder'(Tlv, [16]).

'dec_P-recordCollectionOrder'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute orderWord(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute dataBlock(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_native_bit_string(V2, [], [3]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'P-recordCollectionOrder', Term1, Term2}.



%%================================
%%  T-recordUpdate
%%================================
'enc_T-recordUpdate'(Val) ->
    'enc_T-recordUpdate'(Val, [<<48>>]).

'enc_T-recordUpdate'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute number(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute orderWord(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute dataBlock(3) with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_bit_string([], Cindex3, [], [<<3>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_T-recordUpdate'(Tlv) ->
   'dec_T-recordUpdate'(Tlv, [16]).

'dec_T-recordUpdate'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute number(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute orderWord(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

%%-------------------------------------------------
%% attribute dataBlock(3) with type BIT STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_native_bit_string(V3, [], [3]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'T-recordUpdate', Term1, Term2, Term3}.



%%================================
%%  P-recordArgsSend
%%================================
'enc_P-recordArgsSend'(Val) ->
    'enc_P-recordArgsSend'(Val, [<<48>>]).

'enc_P-recordArgsSend'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute orderWord(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute dataBlock(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_bit_string([], Cindex2, [], [<<3>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_P-recordArgsSend'(Tlv) ->
   'dec_P-recordArgsSend'(Tlv, [16]).

'dec_P-recordArgsSend'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute orderWord(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute dataBlock(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_native_bit_string(V2, [], [3]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'P-recordArgsSend', Term1, Term2}.



%%================================
%%  T-electronInvoiceReport
%%================================
'enc_T-electronInvoiceReport'(Val) ->
    'enc_T-electronInvoiceReport'(Val, [<<48>>]).

'enc_T-electronInvoiceReport'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute length(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute content(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_bit_string([], Cindex2, [], [<<3>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_T-electronInvoiceReport'(Tlv) ->
   'dec_T-electronInvoiceReport'(Tlv, [16]).

'dec_T-electronInvoiceReport'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute length(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute content(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_native_bit_string(V2, [], [3]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'T-electronInvoiceReport', Term1, Term2}.



%%================================
%%  T-repIdeRequest
%%================================
'enc_T-repIdeRequest'(Val) ->
    'enc_T-repIdeRequest'(Val, [<<48>>]).

'enc_T-repIdeRequest'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute none(1) with type NULL
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_null(Cindex1, [<<5>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_T-repIdeRequest'(Tlv) ->
   'dec_T-repIdeRequest'(Tlv, [16]).

'dec_T-repIdeRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute none(1) with type NULL
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_null(V1,[5]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'T-repIdeRequest', Term1}.



%%================================
%%  T-ideColReport
%%================================
'enc_T-ideColReport'(Val) ->
    'enc_T-ideColReport'(Val, [<<48>>]).

'enc_T-ideColReport'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9} = Val,

%%-------------------------------------------------
%% attribute state(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute time(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_bit_string([], Cindex2, [], [<<3>>]),

%%-------------------------------------------------
%% attribute idReadResult(3) with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_bit_string([], Cindex3, [], [<<3>>]),

%%-------------------------------------------------
%% attribute nameLen(4) with type BIT STRING
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_bit_string([], Cindex4, [], [<<3>>]),

%%-------------------------------------------------
%% attribute name(5) with type IA5String
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_restricted_string(Cindex5, [<<22>>]),

%%-------------------------------------------------
%% attribute certificateNumber(6) with type IA5String
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_restricted_string(Cindex6, [<<22>>]),

%%-------------------------------------------------
%% attribute organizationLen(7) with type INTEGER
%%-------------------------------------------------
   {EncBytes7,EncLen7} = encode_integer(Cindex7, [<<2>>]),

%%-------------------------------------------------
%% attribute organization(8) with type IA5String
%%-------------------------------------------------
   {EncBytes8,EncLen8} = encode_restricted_string(Cindex8, [<<22>>]),

%%-------------------------------------------------
%% attribute validity(9) with type BIT STRING
%%-------------------------------------------------
   {EncBytes9,EncLen9} = encode_bit_string([], Cindex9, [], [<<3>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_T-ideColReport'(Tlv) ->
   'dec_T-ideColReport'(Tlv, [16]).

'dec_T-ideColReport'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute state(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute time(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_native_bit_string(V2, [], [3]),

%%-------------------------------------------------
%% attribute idReadResult(3) with type BIT STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_native_bit_string(V3, [], [3]),

%%-------------------------------------------------
%% attribute nameLen(4) with type BIT STRING
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_native_bit_string(V4, [], [3]),

%%-------------------------------------------------
%% attribute name(5) with type IA5String
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_restricted_string(V5,[22]),

%%-------------------------------------------------
%% attribute certificateNumber(6) with type IA5String
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = decode_restricted_string(V6,[22]),

%%-------------------------------------------------
%% attribute organizationLen(7) with type INTEGER
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = decode_integer(V7,[],[2]),

%%-------------------------------------------------
%% attribute organization(8) with type IA5String
%%-------------------------------------------------
[V8|Tlv9] = Tlv8, 
Term8 = decode_restricted_string(V8,[22]),

%%-------------------------------------------------
%% attribute validity(9) with type BIT STRING
%%-------------------------------------------------
[V9|Tlv10] = Tlv9, 
Term9 = decode_native_bit_string(V9, [], [3]),

case Tlv10 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv10}}}) % extra fields not allowed
end,
   {'T-ideColReport', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9}.



%%================================
%%  T-siteDataUpdate
%%================================
'enc_T-siteDataUpdate'(Val) ->
    'enc_T-siteDataUpdate'(Val, [<<48>>]).

'enc_T-siteDataUpdate'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute dataItemCount(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute positionDadaType(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute positionItem(3) with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_bit_string([], Cindex3, [], [<<3>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_T-siteDataUpdate'(Tlv) ->
   'dec_T-siteDataUpdate'(Tlv, [16]).

'dec_T-siteDataUpdate'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dataItemCount(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute positionDadaType(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

%%-------------------------------------------------
%% attribute positionItem(3) with type BIT STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_native_bit_string(V3, [], [3]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'T-siteDataUpdate', Term1, Term2, Term3}.



%%================================
%%  T-CANDataUpdate
%%================================
'enc_T-CANDataUpdate'(Val) ->
    'enc_T-CANDataUpdate'(Val, [<<48>>]).

'enc_T-CANDataUpdate'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute dataItemCount(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute canRecTime(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_bit_string([], Cindex2, [], [<<3>>]),

%%-------------------------------------------------
%% attribute canDataItem(3) with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_bit_string([], Cindex3, [], [<<3>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_T-CANDataUpdate'(Tlv) ->
   'dec_T-CANDataUpdate'(Tlv, [16]).

'dec_T-CANDataUpdate'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dataItemCount(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute canRecTime(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_native_bit_string(V2, [], [3]),

%%-------------------------------------------------
%% attribute canDataItem(3) with type BIT STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_native_bit_string(V3, [], [3]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'T-CANDataUpdate', Term1, Term2, Term3}.



%%================================
%%  T-multimediaEventUpdate
%%================================
'enc_T-multimediaEventUpdate'(Val) ->
    'enc_T-multimediaEventUpdate'(Val, [<<48>>]).

'enc_T-multimediaEventUpdate'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute type(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute code(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<2>>]),

%%-------------------------------------------------
%% attribute eventItemCode(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<2>>]),

%%-------------------------------------------------
%% attribute pipeId(5) with type INTEGER
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_integer(Cindex5, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_T-multimediaEventUpdate'(Tlv) ->
   'dec_T-multimediaEventUpdate'(Tlv, [16]).

'dec_T-multimediaEventUpdate'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute type(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

%%-------------------------------------------------
%% attribute code(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_integer(V3,[],[2]),

%%-------------------------------------------------
%% attribute eventItemCode(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_integer(V4,[],[2]),

%%-------------------------------------------------
%% attribute pipeId(5) with type INTEGER
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_integer(V5,[],[2]),

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
   {'T-multimediaEventUpdate', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  T-multimediaDataUpdate
%%================================
'enc_T-multimediaDataUpdate'(Val) ->
    'enc_T-multimediaDataUpdate'(Val, [<<48>>]).

'enc_T-multimediaDataUpdate'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7} = Val,

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute type(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute code(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<2>>]),

%%-------------------------------------------------
%% attribute eventCode(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<2>>]),

%%-------------------------------------------------
%% attribute pipeId(5) with type INTEGER
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_integer(Cindex5, [<<2>>]),

%%-------------------------------------------------
%% attribute msgBody(6) with type BIT STRING
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_bit_string([], Cindex6, [], [<<3>>]),

%%-------------------------------------------------
%% attribute dataPackage(7) with type BIT STRING
%%-------------------------------------------------
   {EncBytes7,EncLen7} = encode_bit_string([], Cindex7, [], [<<3>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_T-multimediaDataUpdate'(Tlv) ->
   'dec_T-multimediaDataUpdate'(Tlv, [16]).

'dec_T-multimediaDataUpdate'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute type(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

%%-------------------------------------------------
%% attribute code(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_integer(V3,[],[2]),

%%-------------------------------------------------
%% attribute eventCode(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_integer(V4,[],[2]),

%%-------------------------------------------------
%% attribute pipeId(5) with type INTEGER
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_integer(V5,[],[2]),

%%-------------------------------------------------
%% attribute msgBody(6) with type BIT STRING
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = decode_native_bit_string(V6, [], [3]),

%%-------------------------------------------------
%% attribute dataPackage(7) with type BIT STRING
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = decode_native_bit_string(V7, [], [3]),

case Tlv8 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv8}}}) % extra fields not allowed
end,
   {'T-multimediaDataUpdate', Term1, Term2, Term3, Term4, Term5, Term6, Term7}.



%%================================
%%  P-multimediaDataReply
%%================================
'enc_P-multimediaDataReply'(Val) ->
    'enc_P-multimediaDataReply'(Val, [<<48>>]).

'enc_P-multimediaDataReply'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute pacCount(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute idItems(3) with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_bit_string([], Cindex3, [], [<<3>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_P-multimediaDataReply'(Tlv) ->
   'dec_P-multimediaDataReply'(Tlv, [16]).

'dec_P-multimediaDataReply'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute pacCount(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

%%-------------------------------------------------
%% attribute idItems(3) with type BIT STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_native_bit_string(V3, [], [3]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'P-multimediaDataReply', Term1, Term2, Term3}.



%%================================
%%  P-shootOrder
%%================================
'enc_P-shootOrder'(Val) ->
    'enc_P-shootOrder'(Val, [<<48>>]).

'enc_P-shootOrder'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10} = Val,

%%-------------------------------------------------
%% attribute pipeId(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute order(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute time(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<2>>]),

%%-------------------------------------------------
%% attribute saveSymbol(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<2>>]),

%%-------------------------------------------------
%% attribute distinguishRate(5) with type INTEGER
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_integer(Cindex5, [<<2>>]),

%%-------------------------------------------------
%% attribute quality(6) with type INTEGER
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_integer(Cindex6, [<<2>>]),

%%-------------------------------------------------
%% attribute brightness(7) with type INTEGER
%%-------------------------------------------------
   {EncBytes7,EncLen7} = encode_integer(Cindex7, [<<2>>]),

%%-------------------------------------------------
%% attribute contrast(8) with type INTEGER
%%-------------------------------------------------
   {EncBytes8,EncLen8} = encode_integer(Cindex8, [<<2>>]),

%%-------------------------------------------------
%% attribute sat(9) with type INTEGER
%%-------------------------------------------------
   {EncBytes9,EncLen9} = encode_integer(Cindex9, [<<2>>]),

%%-------------------------------------------------
%% attribute chroma(10) with type INTEGER
%%-------------------------------------------------
   {EncBytes10,EncLen10} = encode_integer(Cindex10, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_P-shootOrder'(Tlv) ->
   'dec_P-shootOrder'(Tlv, [16]).

'dec_P-shootOrder'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute pipeId(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute order(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

%%-------------------------------------------------
%% attribute time(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_integer(V3,[],[2]),

%%-------------------------------------------------
%% attribute saveSymbol(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_integer(V4,[],[2]),

%%-------------------------------------------------
%% attribute distinguishRate(5) with type INTEGER
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_integer(V5,[],[2]),

%%-------------------------------------------------
%% attribute quality(6) with type INTEGER
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = decode_integer(V6,[],[2]),

%%-------------------------------------------------
%% attribute brightness(7) with type INTEGER
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = decode_integer(V7,[],[2]),

%%-------------------------------------------------
%% attribute contrast(8) with type INTEGER
%%-------------------------------------------------
[V8|Tlv9] = Tlv8, 
Term8 = decode_integer(V8,[],[2]),

%%-------------------------------------------------
%% attribute sat(9) with type INTEGER
%%-------------------------------------------------
[V9|Tlv10] = Tlv9, 
Term9 = decode_integer(V9,[],[2]),

%%-------------------------------------------------
%% attribute chroma(10) with type INTEGER
%%-------------------------------------------------
[V10|Tlv11] = Tlv10, 
Term10 = decode_integer(V10,[],[2]),

case Tlv11 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv11}}}) % extra fields not allowed
end,
   {'P-shootOrder', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10}.



%%================================
%%  T-shootOrderReply
%%================================
'enc_T-shootOrderReply'(Val) ->
    'enc_T-shootOrderReply'(Val, [<<48>>]).

'enc_T-shootOrderReply'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute replyNum(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute result(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute mediaIdCount(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<2>>]),

%%-------------------------------------------------
%% attribute mediaIdLists(4) with type BIT STRING
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_bit_string([], Cindex4, [], [<<3>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_T-shootOrderReply'(Tlv) ->
   'dec_T-shootOrderReply'(Tlv, [16]).

'dec_T-shootOrderReply'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute replyNum(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute result(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

%%-------------------------------------------------
%% attribute mediaIdCount(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_integer(V3,[],[2]),

%%-------------------------------------------------
%% attribute mediaIdLists(4) with type BIT STRING
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_native_bit_string(V4, [], [3]),

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'T-shootOrderReply', Term1, Term2, Term3, Term4}.



%%================================
%%  P-stoMulDataSearch
%%================================
'enc_P-stoMulDataSearch'(Val) ->
    'enc_P-stoMulDataSearch'(Val, [<<48>>]).

'enc_P-stoMulDataSearch'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute mediaType(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute pipeId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute eventCode(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<2>>]),

%%-------------------------------------------------
%% attribute startTime(4) with type BIT STRING
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_bit_string([], Cindex4, [], [<<3>>]),

%%-------------------------------------------------
%% attribute endTime(5) with type BIT STRING
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_bit_string([], Cindex5, [], [<<3>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_P-stoMulDataSearch'(Tlv) ->
   'dec_P-stoMulDataSearch'(Tlv, [16]).

'dec_P-stoMulDataSearch'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute mediaType(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute pipeId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

%%-------------------------------------------------
%% attribute eventCode(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_integer(V3,[],[2]),

%%-------------------------------------------------
%% attribute startTime(4) with type BIT STRING
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_native_bit_string(V4, [], [3]),

%%-------------------------------------------------
%% attribute endTime(5) with type BIT STRING
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_native_bit_string(V5, [], [3]),

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
   {'P-stoMulDataSearch', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  T-stoMulDataReply
%%================================
'enc_T-stoMulDataReply'(Val) ->
    'enc_T-stoMulDataReply'(Val, [<<48>>]).

'enc_T-stoMulDataReply'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7} = Val,

%%-------------------------------------------------
%% attribute replyNum(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute mediaItemCount(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute mediaId(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<2>>]),

%%-------------------------------------------------
%% attribute mediaType(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<2>>]),

%%-------------------------------------------------
%% attribute pipeId(5) with type INTEGER
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_integer(Cindex5, [<<2>>]),

%%-------------------------------------------------
%% attribute eventCode(6) with type INTEGER
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_integer(Cindex6, [<<2>>]),

%%-------------------------------------------------
%% attribute positionMsgReply(7) with type BIT STRING
%%-------------------------------------------------
   {EncBytes7,EncLen7} = encode_bit_string([], Cindex7, [], [<<3>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_T-stoMulDataReply'(Tlv) ->
   'dec_T-stoMulDataReply'(Tlv, [16]).

'dec_T-stoMulDataReply'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute replyNum(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute mediaItemCount(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

%%-------------------------------------------------
%% attribute mediaId(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_integer(V3,[],[2]),

%%-------------------------------------------------
%% attribute mediaType(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_integer(V4,[],[2]),

%%-------------------------------------------------
%% attribute pipeId(5) with type INTEGER
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_integer(V5,[],[2]),

%%-------------------------------------------------
%% attribute eventCode(6) with type INTEGER
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = decode_integer(V6,[],[2]),

%%-------------------------------------------------
%% attribute positionMsgReply(7) with type BIT STRING
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = decode_native_bit_string(V7, [], [3]),

case Tlv8 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv8}}}) % extra fields not allowed
end,
   {'T-stoMulDataReply', Term1, Term2, Term3, Term4, Term5, Term6, Term7}.



%%================================
%%  T-stoMulDataUpdate
%%================================
'enc_T-stoMulDataUpdate'(Val) ->
    'enc_T-stoMulDataUpdate'(Val, [<<48>>]).

'enc_T-stoMulDataUpdate'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute mediaType(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute pipeId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute eventCode(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<2>>]),

%%-------------------------------------------------
%% attribute startTime(4) with type BIT STRING
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_bit_string([], Cindex4, [], [<<3>>]),

%%-------------------------------------------------
%% attribute endTime(5) with type BIT STRING
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_bit_string([], Cindex5, [], [<<3>>]),

%%-------------------------------------------------
%% attribute delSymbol(6) with type INTEGER
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_integer(Cindex6, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_T-stoMulDataUpdate'(Tlv) ->
   'dec_T-stoMulDataUpdate'(Tlv, [16]).

'dec_T-stoMulDataUpdate'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute mediaType(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute pipeId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

%%-------------------------------------------------
%% attribute eventCode(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_integer(V3,[],[2]),

%%-------------------------------------------------
%% attribute startTime(4) with type BIT STRING
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_native_bit_string(V4, [], [3]),

%%-------------------------------------------------
%% attribute endTime(5) with type BIT STRING
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_native_bit_string(V5, [], [3]),

%%-------------------------------------------------
%% attribute delSymbol(6) with type INTEGER
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = decode_integer(V6,[],[2]),

case Tlv7 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv7}}}) % extra fields not allowed
end,
   {'T-stoMulDataUpdate', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  P-recordStartOrder
%%================================
'enc_P-recordStartOrder'(Val) ->
    'enc_P-recordStartOrder'(Val, [<<48>>]).

'enc_P-recordStartOrder'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute recordCode(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute recordTime(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute saveSymbol(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<2>>]),

%%-------------------------------------------------
%% attribute voiceSamplingRate(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_P-recordStartOrder'(Tlv) ->
   'dec_P-recordStartOrder'(Tlv, [16]).

'dec_P-recordStartOrder'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute recordCode(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute recordTime(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

%%-------------------------------------------------
%% attribute saveSymbol(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_integer(V3,[],[2]),

%%-------------------------------------------------
%% attribute voiceSamplingRate(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_integer(V4,[],[2]),

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'P-recordStartOrder', Term1, Term2, Term3, Term4}.



%%================================
%%  T-singlestoMulDataSeaUpdOrder
%%================================
'enc_T-singlestoMulDataSeaUpdOrder'(Val) ->
    'enc_T-singlestoMulDataSeaUpdOrder'(Val, [<<48>>]).

'enc_T-singlestoMulDataSeaUpdOrder'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute mediaId(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute delSymbol(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_T-singlestoMulDataSeaUpdOrder'(Tlv) ->
   'dec_T-singlestoMulDataSeaUpdOrder'(Tlv, [16]).

'dec_T-singlestoMulDataSeaUpdOrder'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute mediaId(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute delSymbol(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[],[2]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'T-singlestoMulDataSeaUpdOrder', Term1, Term2}.



%%================================
%%  P-dataSend
%%================================
'enc_P-dataSend'(Val) ->
    'enc_P-dataSend'(Val, [<<48>>]).

'enc_P-dataSend'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute msgType(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute msgContent(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_bit_string([], Cindex2, [], [<<3>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_P-dataSend'(Tlv) ->
   'dec_P-dataSend'(Tlv, [16]).

'dec_P-dataSend'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute msgType(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute msgContent(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_native_bit_string(V2, [], [3]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'P-dataSend', Term1, Term2}.



%%================================
%%  T-dataUpdate
%%================================
'enc_T-dataUpdate'(Val) ->
    'enc_T-dataUpdate'(Val, [<<48>>]).

'enc_T-dataUpdate'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute msgType(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute msgContent(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_bit_string([], Cindex2, [], [<<3>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_T-dataUpdate'(Tlv) ->
   'dec_T-dataUpdate'(Tlv, [16]).

'dec_T-dataUpdate'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute msgType(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute msgContent(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_native_bit_string(V2, [], [3]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'T-dataUpdate', Term1, Term2}.



%%================================
%%  T-compressUpdtae
%%================================
'enc_T-compressUpdtae'(Val) ->
    'enc_T-compressUpdtae'(Val, [<<48>>]).

'enc_T-compressUpdtae'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute compressMsgLen(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute compressMsgBody(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_bit_string([], Cindex2, [], [<<3>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_T-compressUpdtae'(Tlv) ->
   'dec_T-compressUpdtae'(Tlv, [16]).

'dec_T-compressUpdtae'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute compressMsgLen(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute compressMsgBody(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_native_bit_string(V2, [], [3]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'T-compressUpdtae', Term1, Term2}.



%%================================
%%  P-RSA
%%================================
'enc_P-RSA'(Val) ->
    'enc_P-RSA'(Val, [<<48>>]).

'enc_P-RSA'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute e(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute n(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_bit_string([], Cindex2, [], [<<3>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_P-RSA'(Tlv) ->
   'dec_P-RSA'(Tlv, [16]).

'dec_P-RSA'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute e(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute n(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_native_bit_string(V2, [], [3]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'P-RSA', Term1, Term2}.



%%================================
%%  T-RSA
%%================================
'enc_T-RSA'(Val) ->
    'enc_T-RSA'(Val, [<<48>>]).

'enc_T-RSA'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute e(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute n(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_bit_string([], Cindex2, [], [<<3>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_T-RSA'(Tlv) ->
   'dec_T-RSA'(Tlv, [16]).

'dec_T-RSA'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute e(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute n(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_native_bit_string(V2, [], [3]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'T-RSA', Term1, Term2}.


%%%
%%% Run-time functions.
%%%

ber_decode_nif(B) ->
    asn1rt_nif:decode_ber_tlv(B).

check_restricted_string(Val, StrLen, Range) ->
    case Range of
        {Lb,Ub} when StrLen >= Lb, Ub >= StrLen ->
            Val;
        {{Lb,_Ub},[]} when StrLen >= Lb ->
            Val;
        {{Lb,_Ub},_Ext = [Min|_]} when StrLen >= Lb; StrLen >= Min ->
            Val;
        {{Lb1,Ub1},{Lb2,Ub2}}
            when
                StrLen >= Lb1, StrLen =< Ub1;
                StrLen =< Ub2, StrLen >= Lb2 ->
            Val;
        StrLen ->
            Val;
        {_,_} ->
            exit({error,{asn1,{length,Range,Val}}});
        _Len when is_integer(_Len) ->
            exit({error,{asn1,{length,Range,Val}}});
        _ ->
            Val
    end.

collect_parts(TlvList) ->
    collect_parts(TlvList, []).

collect_parts([{_,L}|Rest], Acc) when is_list(L) ->
    collect_parts(Rest, [collect_parts(L)|Acc]);
collect_parts([{3,<<Unused,Bits/binary>>}|Rest], _Acc) ->
    collect_parts_bit(Rest, [Bits], Unused);
collect_parts([{_T,V}|Rest], Acc) ->
    collect_parts(Rest, [V|Acc]);
collect_parts([], Acc) ->
    list_to_binary(lists:reverse(Acc)).

collect_parts_bit([{3,<<Unused,Bits/binary>>}|Rest], Acc, Uacc) ->
    collect_parts_bit(Rest, [Bits|Acc], Unused + Uacc);
collect_parts_bit([], Acc, Uacc) ->
    list_to_binary([Uacc|lists:reverse(Acc)]).

decode_integer(Bin) ->
    Len = byte_size(Bin),
    <<Int:Len/signed-unit:8>> = Bin,
    Int.

decode_integer(Tlv, Range, NamedNumberList, TagIn) ->
    V = match_tags(Tlv, TagIn),
    Int = range_check_integer(decode_integer(V), Range),
    number2name(Int, NamedNumberList).

decode_integer(Tlv, Range, TagIn) ->
    V = match_tags(Tlv, TagIn),
    Int = decode_integer(V),
    range_check_integer(Int, Range).

decode_native_bit_string(Buffer, Range, Tags) ->
    case match_and_collect(Buffer, Tags) of
        <<0>> ->
            check_restricted_string(<<>>, 0, Range);
        <<Unused,Bits/binary>> ->
            Size = bit_size(Bits) - Unused,
            <<Val:Size/bitstring,_:Unused/bitstring>> = Bits,
            check_restricted_string(Val, Size, Range)
    end.

decode_null(Tlv, Tags) ->
    Val = match_tags(Tlv, Tags),
    case Val of
        <<>> ->
            'NULL';
        _ ->
            exit({error,{asn1,{decode_null,Val}}})
    end.

decode_restricted_string(Tlv, TagsIn) ->
    Bin = match_and_collect(Tlv, TagsIn),
    binary_to_list(Bin).

encode_bin_bit_string(C, {Unused,BinBits}, _NamedBitList, TagIn) ->
    case get_constraint(C, 'SizeConstraint') of
        no ->
            remove_unused_then_dotag(TagIn, Unused, BinBits);
        {_Min,Max} ->
            BBLen = byte_size(BinBits) * 8 - Unused,
            if
                BBLen > Max ->
                    exit({error,
                          {asn1,
                           {bitstring_length,
                            {{was,BBLen},{maximum,Max}}}}});
                true ->
                    remove_unused_then_dotag(TagIn, Unused, BinBits)
            end;
        Size ->
            case byte_size(BinBits) * 8 - Unused of
                BBSize when BBSize =< Size ->
                    remove_unused_then_dotag(TagIn, Unused, BinBits);
                BBSize ->
                    exit({error,
                          {asn1,
                           {bitstring_length,
                            {{was,BBSize},{should_be,Size}}}}})
            end
    end.

encode_bit_string(C, Bits, NamedBitList, TagIn) when is_bitstring(Bits) ->
    PadLen = (8 - bit_size(Bits) band 7) band 7,
    Compact = {PadLen,<<Bits/bitstring,0:PadLen>>},
    encode_bin_bit_string(C, Compact, NamedBitList, TagIn);
encode_bit_string(C, Bin = {Unused,BinBits}, NamedBitList, TagIn)
    when is_integer(Unused), is_binary(BinBits) ->
    encode_bin_bit_string(C, Bin, NamedBitList, TagIn);
encode_bit_string(C, [FirstVal|RestVal], NamedBitList, TagIn)
    when is_atom(FirstVal) ->
    encode_bit_string_named(C, [FirstVal|RestVal], NamedBitList, TagIn);
encode_bit_string(C, [{bit,X}|RestVal], NamedBitList, TagIn) ->
    encode_bit_string_named(C, [{bit,X}|RestVal], NamedBitList, TagIn);
encode_bit_string(C, [FirstVal|RestVal], NamedBitList, TagIn)
    when is_integer(FirstVal) ->
    encode_bit_string_bits(C, [FirstVal|RestVal], NamedBitList, TagIn);
encode_bit_string(_C, 0, _NamedBitList, TagIn) ->
    encode_tags(TagIn, <<0>>, 1);
encode_bit_string(_C, [], _NamedBitList, TagIn) ->
    encode_tags(TagIn, <<0>>, 1);
encode_bit_string(C, IntegerVal, NamedBitList, TagIn)
    when is_integer(IntegerVal) ->
    BitListVal = int_to_bitlist(IntegerVal),
    encode_bit_string_bits(C, BitListVal, NamedBitList, TagIn).

encode_bit_string_bits(C, BitListVal, _NamedBitList, TagIn)
    when is_list(BitListVal) ->
    case get_constraint(C, 'SizeConstraint') of
        no ->
            {Len,Unused,OctetList} = encode_bitstring(BitListVal),
            encode_tags(TagIn, [Unused|OctetList], Len + 1);
        Constr = {Min,_Max} when is_integer(Min) ->
            encode_constr_bit_str_bits(Constr, BitListVal, TagIn);
        {Constr = {_,_},[]} ->
            encode_constr_bit_str_bits(Constr, BitListVal, TagIn);
        Constr = {{_,_},{_,_}} ->
            encode_constr_bit_str_bits(Constr, BitListVal, TagIn);
        Size ->
            case length(BitListVal) of
                BitSize when BitSize == Size ->
                    {Len,Unused,OctetList} =
                        encode_bitstring(BitListVal),
                    encode_tags(TagIn, [Unused|OctetList], Len + 1);
                BitSize when BitSize < Size ->
                    PaddedList =
                        pad_bit_list(Size - BitSize, BitListVal),
                    {Len,Unused,OctetList} =
                        encode_bitstring(PaddedList),
                    encode_tags(TagIn, [Unused|OctetList], Len + 1);
                BitSize ->
                    exit({error,
                          {asn1,
                           {bitstring_length,
                            {{was,BitSize},{should_be,Size}}}}})
            end
    end.

encode_bit_string_named(C, [FirstVal|RestVal], NamedBitList, TagIn) ->
    ToSetPos = get_all_bitposes([FirstVal|RestVal], NamedBitList, []),
    Size =
        case get_constraint(C, 'SizeConstraint') of
            no ->
                lists:max(ToSetPos) + 1;
            {_Min,Max} ->
                Max;
            TSize ->
                TSize
        end,
    BitList = make_and_set_list(Size, ToSetPos, 0),
    {Len,Unused,OctetList} = encode_bitstring(BitList),
    encode_tags(TagIn, [Unused|OctetList], Len + 1).

encode_bitstring([B8,B7,B6,B5,B4,B3,B2,B1|Rest]) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    encode_bitstring(Rest, [Val], 1);
encode_bitstring(Val) ->
    {Unused,Octet} = unused_bitlist(Val, 7, 0),
    {1,Unused,[Octet]}.

encode_bitstring([B8,B7,B6,B5,B4,B3,B2,B1|Rest], Ack, Len) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    encode_bitstring(Rest, [Ack,Val], Len + 1);
encode_bitstring([], Ack, Len) ->
    {Len,0,Ack};
encode_bitstring(Rest, Ack, Len) ->
    {Unused,Val} = unused_bitlist(Rest, 7, 0),
    {Len + 1,Unused,[Ack,Val]}.

encode_constr_bit_str_bits({{_Min1,Max1},{Min2,Max2}},
                           BitListVal,
                           TagIn) ->
    BitLen = length(BitListVal),
    case BitLen of
        Len when Len > Max2 ->
            exit({error,
                  {asn1,
                   {bitstring_length,{{was,BitLen},{maximum,Max2}}}}});
        Len when Len > Max1, Len < Min2 ->
            exit({error,
                  {asn1,
                   {bitstring_length,
                    {{was,BitLen},{not_allowed_interval,Max1,Min2}}}}});
        _ ->
            {Len,Unused,OctetList} = encode_bitstring(BitListVal),
            encode_tags(TagIn, [Unused,OctetList], Len + 1)
    end;
encode_constr_bit_str_bits({Min,Max}, BitListVal, TagIn) ->
    BitLen = length(BitListVal),
    if
        BitLen > Max ->
            exit({error,
                  {asn1,{bitstring_length,{{was,BitLen},{maximum,Max}}}}});
        BitLen < Min ->
            exit({error,
                  {asn1,{bitstring_length,{{was,BitLen},{minimum,Max}}}}});
        true ->
            {Len,Unused,OctetList} = encode_bitstring(BitListVal),
            encode_tags(TagIn, [Unused,OctetList], Len + 1)
    end.

encode_integer(Val) ->
    Bytes =
        if
            Val >= 0 ->
                encode_integer_pos(Val, []);
            true ->
                encode_integer_neg(Val, [])
        end,
    {Bytes,length(Bytes)}.

encode_integer(Val, NamedNumberList, Tag) when is_atom(Val) ->
    case lists:keyfind(Val, 1, NamedNumberList) of
        {_,NewVal} ->
            encode_tags(Tag, encode_integer(NewVal));
        _ ->
            exit({error,{asn1,{encode_integer_namednumber,Val}}})
    end;
encode_integer(Val, _NamedNumberList, Tag) ->
    encode_tags(Tag, encode_integer(Val)).

encode_integer(Val, Tag) when is_integer(Val) ->
    encode_tags(Tag, encode_integer(Val));
encode_integer(Val, _Tag) ->
    exit({error,{asn1,{encode_integer,Val}}}).

encode_integer_neg(- 1, [B1|_T] = L) when B1 > 127 ->
    L;
encode_integer_neg(N, Acc) ->
    encode_integer_neg(N bsr 8, [N band 255|Acc]).

encode_integer_pos(0, [B|_Acc] = L) when B < 128 ->
    L;
encode_integer_pos(N, Acc) ->
    encode_integer_pos(N bsr 8, [N band 255|Acc]).

encode_length(L) when L =< 127 ->
    {[L],1};
encode_length(L) ->
    Oct = minimum_octets(L),
    Len = length(Oct),
    if
        Len =< 126 ->
            {[128 bor Len|Oct],Len + 1};
        true ->
            exit({error,{asn1,too_long_length_oct,Len}})
    end.

encode_null(_Val, TagIn) ->
    encode_tags(TagIn, [], 0).

encode_restricted_string(OctetList, TagIn) when is_binary(OctetList) ->
    encode_tags(TagIn, OctetList, byte_size(OctetList));
encode_restricted_string(OctetList, TagIn) when is_list(OctetList) ->
    encode_tags(TagIn, OctetList, length(OctetList)).

encode_tags(TagIn, {BytesSoFar,LenSoFar}) ->
    encode_tags(TagIn, BytesSoFar, LenSoFar).

encode_tags([Tag|Trest], BytesSoFar, LenSoFar) ->
    {Bytes2,L2} = encode_length(LenSoFar),
    encode_tags(Trest,
                [Tag,Bytes2|BytesSoFar],
                LenSoFar + byte_size(Tag) + L2);
encode_tags([], BytesSoFar, LenSoFar) ->
    {BytesSoFar,LenSoFar}.

get_all_bitposes([{bit,ValPos}|Rest], NamedBitList, Ack) ->
    get_all_bitposes(Rest, NamedBitList, [ValPos|Ack]);
get_all_bitposes([Val|Rest], NamedBitList, Ack) when is_atom(Val) ->
    case lists:keyfind(Val, 1, NamedBitList) of
        {_ValName,ValPos} ->
            get_all_bitposes(Rest, NamedBitList, [ValPos|Ack]);
        _ ->
            exit({error,{asn1,{bitstring_namedbit,Val}}})
    end;
get_all_bitposes([], _NamedBitList, Ack) ->
    lists:sort(Ack).

get_constraint(C, Key) ->
    case lists:keyfind(Key, 1, C) of
        false ->
            no;
        {_,V} ->
            V
    end.

int_to_bitlist(0) ->
    [];
int_to_bitlist(Int) when is_integer(Int), Int >= 0 ->
    [Int band 1|int_to_bitlist(Int bsr 1)].

make_and_set_list(0, [], _) ->
    [];
make_and_set_list(0, _, _) ->
    exit({error,{asn1,bitstring_sizeconstraint}});
make_and_set_list(Len, [XPos|SetPos], XPos) ->
    [1|make_and_set_list(Len - 1, SetPos, XPos + 1)];
make_and_set_list(Len, [Pos|SetPos], XPos) ->
    [0|make_and_set_list(Len - 1, [Pos|SetPos], XPos + 1)];
make_and_set_list(Len, [], XPos) ->
    [0|make_and_set_list(Len - 1, [], XPos + 1)].

match_and_collect(Tlv, TagsIn) ->
    Val = match_tags(Tlv, TagsIn),
    case Val of
        [_|_] = PartList ->
            collect_parts(PartList);
        Bin when is_binary(Bin) ->
            Bin
    end.

match_tags({T,V}, [T]) ->
    V;
match_tags({T,V}, [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,V}], [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,_V}|_] = Vlist, [T]) ->
    Vlist;
match_tags(Tlv, []) ->
    Tlv;
match_tags({Tag,_V} = Tlv, [T|_Tt]) ->
    exit({error,{asn1,{wrong_tag,{{expected,T},{got,Tag,Tlv}}}}}).

minimum_octets(0, Acc) ->
    Acc;
minimum_octets(Val, Acc) ->
    minimum_octets(Val bsr 8, [Val band 255|Acc]).

minimum_octets(Val) ->
    minimum_octets(Val, []).

number2name(Int, []) ->
    Int;
number2name(Int, NamedNumberList) ->
    case lists:keyfind(Int, 2, NamedNumberList) of
        {NamedVal,_} ->
            NamedVal;
        _ ->
            Int
    end.

pad_bit_list(Size, BitListVal) ->
    Tail = lists:duplicate(Size, 0),
    lists:append(BitListVal, Tail).

range_check_integer(Int, Range) ->
    case Range of
        [] ->
            Int;
        {Lb,Ub} when Int >= Lb, Ub >= Int ->
            Int;
        {_,_} ->
            exit({error,{asn1,{integer_range,Range,Int}}});
        Int ->
            Int;
        SingleValue when is_integer(SingleValue) ->
            exit({error,{asn1,{integer_range,Range,Int}}});
        _ ->
            Int
    end.

remove_unused_then_dotag(TagIn, Unused, BinBits) ->
    case Unused of
        0 when byte_size(BinBits) =:= 0 ->
            encode_tags(TagIn, <<0>>, 1);
        0 ->
            Bin = <<Unused,BinBits/binary>>,
            encode_tags(TagIn, Bin, size(Bin));
        Num ->
            N = byte_size(BinBits) - 1,
            <<BBits:N/binary,LastByte>> = BinBits,
            encode_tags(TagIn,
                        [Unused,
                         binary_to_list(BBits)
                         ++
                         [LastByte bsr Num bsl Num]],
                        1 + byte_size(BinBits))
    end.

unused_bitlist([], Trail, Ack) ->
    {Trail + 1,Ack};
unused_bitlist([Bit|Rest], Trail, Ack) ->
    unused_bitlist(Rest, Trail - 1, Bit bsl Trail bor Ack).
